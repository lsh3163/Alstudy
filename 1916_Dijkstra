#include <stdio.h>
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int N, M;
int start, dest;

vector<vector<pair<int,int > > > graph;

vector<int> dijkstra(int s){
	vector<int> dist(N + 1, 0x1fffffff);
	priority_queue<pair<int,int > > mq;
	mq.push(make_pair(start, 0));
	dist[start] = 0;
	while (!mq.empty()){
		int X = mq.top().first;
		int D = -mq.top().second;
		mq.pop();
		if (dist[X] < D){
			continue;
		}
		int len = graph[X].size();
		for (int i = 0; i < len; i++){
			int nX = graph[X][i].first;
			int nD = graph[X][i].second + D;
			if (nD < dist[nX]){
				dist[nX] = nD;
				mq.push({ nX, -nD });
			}
		}
	}
	return dist;
}

int main(void){
	cin >> N; cin >> M;
	
	graph.resize(N + 1);
	
	while (M--){
		int u, v, x;
		cin >> u; cin >> v; cin >> x;
		graph[u].push_back({ v, x });
	}

	cin >> start; cin >> dest;
	vector<int> answer = dijkstra(start);
	printf("%d", answer[dest]);
}
